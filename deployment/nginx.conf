user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
	worker_connections 768;
	# multi_accept on;
}

http {
	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# SSL Settings
	##

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
	ssl_prefer_server_ciphers on;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_disable "msie6";

	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

	## 
	# Cache Settings
	##

	proxy_cache_path /var/services/cache levels=1:2 keys_zone=tiles_cache:10m max_size=1g inactive=60m 
	use_temp_path=off;
	etag on;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

	upstream routeable-tiles {
		server localhost:5000;
		server localhost:5001;
		server localhost:5002;
		server localhost:5003;
	} 

	server {
                server_name  tiles.itinero.tech tiles.openplanner.team tiles1.openplanner.team tiles2.openplanner.team tiles3.openplanner.team tiles4.openplanner.team;
                location /planet/ {
			if ($request_method = 'OPTIONS') {
			        add_header 'Access-Control-Allow-Origin' '*';
			        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			        #
			        # Custom headers and headers various browsers *should* be OK with but aren't
			        #
			        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
			        #
			        # Tell client that this pre-flight info is valid for 20 days
			        #
			        add_header 'Access-Control-Max-Age' 1728000;
			        add_header 'Content-Type' 'text/plain; charset=utf-8';
			        add_header 'Content-Length' 0;
			        return 204;
			}
			if ($request_method = 'POST') {
			        add_header 'Access-Control-Allow-Origin' '*';
			        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
			        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
			}
			if ($request_method = 'GET') {
			        add_header 'Access-Control-Allow-Origin' '*';
			        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
			        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
			        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
			}


	                # this line instructs NGINX to use the key zone my_cache if there is a key in the cache for the 
                        # requested resource 
                        proxy_cache tiles_cache;
                        # this line instructs NGINX to use the requested URI as the key for that file
                        proxy_cache_key "$request_uri";
                        # this line instructs NGINX to cache any request where the application responds with a 200 OK status 
                        proxy_cache_valid 200 120m;

		        proxy_pass http://localhost:5000/;
                        proxy_http_version 1.1;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection keep-alive;
                        proxy_set_header Host $host;
                        proxy_set_header X-Forwarded-PathBase /planet/;
                        proxy_set_header Anyways-Original $request_uri;
                        proxy_cache_bypass $http_upgrade;
                        add_header X-Cache-Status $upstream_cache_status;
                        proxy_set_header    X-Forwarded-Host $http_host;    # necessary for proper absolute redirects and TeamCity CSRF check
                        proxy_set_header    X-Forwarded-Proto $scheme;
                        proxy_set_header    X-Forwarded-For $remote_addr;
		}

                location /staging/ {
                        # this line instructs NGINX to use the key zone my_cache if there is a key in the cache for the
                        # requested resource
                        proxy_cache tiles_cache;
                        # this line instructs NGINX to use the requested URI as the key for that file
                        proxy_cache_key "$request_uri";
                        # this line instructs NGINX to cache any request where the application responds with a 200 OK status
                        proxy_cache_valid 200 120m;

                        proxy_pass http://localhost:6000/;
                        proxy_http_version 1.1;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection keep-alive;
                        proxy_set_header Host $host;
                        proxy_set_header X-Forwarded-PathBase /staging/;
                        proxy_set_header Anyways-Original $request_uri;
                        proxy_cache_bypass $http_upgrade;
                        add_header X-Cache-Status $upstream_cache_status;
                        proxy_set_header    X-Forwarded-Host $http_host;    # necessary for proper absolute redirects and TeamCity CSRF check
                        proxy_set_header    X-Forwarded-Proto $scheme;
                        proxy_set_header    X-Forwarded-For $remote_addr;
                }

    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/tiles.itinero.tech/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/tiles.itinero.tech/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot











}

 

	server {
    if ($host = tiles.openplanner.team) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = tiles4.openplanner.team) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = tiles3.openplanner.team) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = tiles2.openplanner.team) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = tiles1.openplanner.team) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = tiles.itinero.tech) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

                listen 80;
		listen [::]:80 ipv6only=on;
                server_name     tiles.itinero.tech tiles.openplanner.team;

    return 404; # managed by Certbot












}}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}
